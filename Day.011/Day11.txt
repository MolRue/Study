Day.11

네이밍가이드

class 나 id 명을 지을땐 아무거나 막하면 꼬인다.

1. 카멜(변수명, 함수명) ★
userList, newTodoList
2. 파스칼케이스(클래스명, 객체명) ★
UserList, NewTodoList
3. 스네이크케이스(파일명)
user_list, new_todo_list
4. 케밥 표기법(원칙적으로 css)
user-list, new-todo-list
5. 헝가리안 표기법(jquery)
$userList, $newTodoList

컴포넌트 약어

 - 약어로 쓰지 않아도 상관은 없는데! 실무에서 자주 쓴다더라구
 - btn : 버튼(button)
 (네이밍 가이드 3~4p)


네이밍 기본 규칙

 - 영문, 대문자, 특수문자로 시작하지 않음.

<h1 class=”Answer”>
<h1 class=”*answer”>
<h1 class=”01_answer”>

 - 네이밍 조합은 '외형_의미_순서_상태' (이건 절대적이진 않지만 참고)
(X)
cancel_btn_off_01.gif
<h1 class=”msgbox-off-toggle”>
(O)
btn_cancel_01_off.gif
<h1 class=”msgbox-toggle-off”>

 - 하이픈(-)은 CSS네이밍에 사용하는걸 권장
 - 언더스코어 (언더바,_)는 파일명, 폴더명에 사용하는걸 권장

<h1 class=”msg-off”>
<input type=”text” class=”msg-on” name=”msg_test”>

 - class, 파일 등 숫자사용시 한자리 정수는 사용하지 않음.
 : 1,2,3,4 대신 01, 02, 03, 04 정도로

BEM 

<nav class=”menu”>
<ul class=”menu__list”>
<li><a href="#">menu1</a></li>
<li><a href="#">menu2</a></li>
<li><a href="#">menu3</a></li>
</ul>
<button class=”button button--color-black”>clicked me</button>
</nav>

1. id는 사용하지 않는다
2. menu
3. menu__list : 언더바 두개(하위계층)
4. button--color-black : 대쉬 두개 (외형, 상태)


 1. rest parameter : 나머지 매개변수
    매개변수가 가변적일때↓
    function sample(...items) {
    console.log(items)
    }

    sample(1, 2)
    sample(1, 2, 3)
    sample(1, 2, 3, 4, 5)

    a,b 까지는 나오고 뒷부분 부터는 restparameter로 빠진다.
    function sample(a, b, ...items) {
        console.log(a, b, items) }

        sample(1, 2)
        sample(1, 2, 3)
        sample(1, 2, 3, 4, 5)

        
        function min(first, ...rests) {

           let output
           let items

        숫자랑 배열을 날려줄때, 매개변수의 자료형이 숫자인지 배열인지 판단

        if(Array.isArray(first)) { // 배열인 경우 true, 그렇지 않은경우 false
        output = first[0]  // 배열의 첫번째값
        items = first
        } else if (typeof(first) === 'number') {// typeof : 자료형을 구할수있다. // 숫자형이라면
        output = first
        items = rests // rests 얘 자체가 배열형이다.
        }
            
        for (const item of items) {  // for...of  같은 경우엔 매개변수의 값을 가져올수 있다.
        if (output > item){  // item 에는 밑에 testArr의 값이 하나씩 대입
        output = item    // 하나씩 대조하는것. output 값이 item값 보다 작아질때까지
        }                    // 최종적으로는 목록의 모든 array 중 가장 작은수가 남을때 까지 반복!
    }
    return output
    }

     const testArr = [52, 273, 43, 103, 275, 24, 57]
     console.log(`최소값(숫자): ${min(52, 273, 43, 103, 275, 24, 57)}`)
     console.log(`최소값(배열): ${min(testArr)}`)

2. spred operator (전개연산자)

        function sample(...items) {
        console.log(items)
        }
            
          const array = [1, 2, 3, 4]

          console.log(`전개 연산자를 사용하지 않을때 : ${sample(array)}`) 
        // [[1,2,3,4]]
    console.log(`전개 연산자를 사용할때 : ${sample(...array)}`)  // 전개 연산자를 사용하려면 매개변수 앞에 '...' 을붙이자
            // 1,2,3,4
            // [1,2,3,4]
            // 전개연산자를 사용할 경우, 배열을 분리해서 하나씩 따로 빼준다. 
       // undefined 가 나오는 이유 = return값이 정의되지 않아서.
3. 기본매개변수

   function earnings(name, wage=9000, hours=40) {  // 초기값을 주었다. 그래서 미 입력된 경우 초기값으로 계산한다. << default parameter : 기본 매개변수
       console.log(`${name} 님의 급여정보`)
       console.log(`시급: ${wage}`)
       console.log(`근무시간: ${hours}`)
       console.log(`급여: ${wage * hours} 원`)
       console.log(`====`)
   }

   earnings('구름')  // 이름만 정의했기 때문에 이름만 나온다. NaN : 숫자가 아닙니다.란뜻.
   earnings('별', 10000)   // 두가지만 정의했기 때문에 시급까진 나옴. 그래서 3번째 급여가 안나옴
   earnings('달', 10000, 52)   // 


4. 구버전 자바스크립트에서 매개변수 구하기 (참고) << 옛날엔 이런걸 썼었다. 이정도?

    function sample() {
        console.log(arguments)   //arguments : 매개변수를 배열로 받아온다.
    for (let i = 0; i < arguments.length; i++) {    //argument를 for 문으로 돌린다.
        console.log(`${i}번째 : ${arguments[i]}`)
    }
    }

    sample(1,2)
    sample(1,2,3)
    sample(1,2,3,4)


break point 
 - 디버깅 작업할때, 작동을 일시 정지 시킬수 있다.


콜백(callback) 함수
 - Javascript에서만 사용하는 특이한 함수
 - 매개변수를 전달하는 함수.
 - 매개변수를 함수로 전달한다?
 - forEach() , map(), filter()
 

타이머 함수
 - callback 함수의 일종
 - setTimeout : 00초 마다 실행 되거나 00초마다 종료할수 있게 해주는 함수.
 - setInterval : 00초마다 반복적으로 실행해주는 함수.

즉시 실행 함수

 - 다른 두 개발자가 하필이면 같은 함수로 코딩해버려서
   충돌이 발생해 버렸을때...?
  (function () { })()
 - 중괄호 안의 함수를 즉시 실행한다.


호이스팅

 - 익명함수와 비익명 함수에서...?
 - 비익명 함수는 호이스팅이 가능하다.
 - 익명함수는 안된데. 끌어올리면 '초기화가 안되었다' 란 오류가뜬다.
 - 밑에서 함수를 끌어 올린다????
 - 정의를 밑에다 해도 끌어올려 쓸수있는 특징!
 
스코프

 - 사전적 의미는 범위
 - 변수 또는 함수의 유효한 범위


지역 변수 : 함수 안의 변수(함수)
전역 변수 : 스크립트 내에서 어디서든 사용할수 있는 변수


 전역: 자바스크립트 어디서든 사용 할 수 있는 변수(함수)
 지역: 스코프 영역에서 선언한 변수(함수), 스코프 영역에서만 사용 가능

    var num = 1;  // 전역변수 > 함수 기준으로 밖에 있는 변수
    //함수선언
    function love(){
      var a = num+1;   // 지역변수 > 함수 안에 있는 변수
      console.log('a:',a);
    }
    love();
    console.log(num);

블록 변수 let
 - let const val 등등등.. 변수 선언할때 쓰던 그친구맞음.
 - 선언된 let 변수는 자신이 속한 중괄호{} 안에서만 사용할수 있다??  
 - var은 다른 중괄호에도 적용될수 있고, 불러낼수 있다. let은 안되겠지만
 - 그럼 const는???? >> let과 동일하다.

매소드 체이닝?????????

 - 필살기인가..??
 - 뭐... 예를들면 filter 함수 뒤에 map 함수를 붙이고 한번더 forEach를 붙인다던지
   함수를 연속으로 쓸수있는 방법. 
 - 시험엔 안나온다 하니 그런갑다 하자.

 