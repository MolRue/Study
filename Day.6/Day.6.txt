day.6......



float layout
 - div태그로 boxing 하는거 신경쓰기.


background img?

 - div 에 background img 를 써서 배경을 넣는 경우
 - 이미지 위에 글자 혹은 효과 등을 넣어야 할때 사용된다.

img tag
 - 단순하게 이미지만 올려 만들경우 <img src="" alt="">
 - 단순한 애니메이션 효과는 줄수 있으나 글자를 삽입하거나 할 순 없다.
 - 포토샵으로 글자가 삽입된 채로 만들어서 올리는 경우는 있다.

background-repeat 
 - 배경 이미지를 반복할 것인가? (바둑판식 정렬 같은 느낌)
 - :no-repeat 

background-position 
 - 배경이미지의 위치를 설정할수 있다.
 - 10% 40%; (X축, Y축)
 - 350px 550px; (절대값으로도 설정 가능하다)

background-attachment
 - 배경이미지 고정

 #bg1 { background-size:auto;}  
 - 원래 배경 이미지 크기로 표시 
  #bg2 { background-size:200px;}  
 - 너비는 200px, 높이는 자동 계산 
  #bg3 { background-size:50%;} 
 - 배경 이미지 너비는 요소 너비의 50%, 높이는 자동 계산 
  #bg4 { background-size:100% 100%;}  
 - 배경 이미지 너비와 높이는 요소 너비의 100%, 요소 높이의 100%  
  #bg5 { background-size:contain;}  
 - 요소 안에 배경 이미지가 다 보이도록 표시 
   #bg6 { background-size:cover;} 
 - 요소를 완전히 덮도록 배경 이미지 표시 


CSS 우선순위

 - 인라인 스타일 > 내부스타일 > 외부스타일 > 브라우저 기본값
> 요소 안에 스타일을 직접 지정
> head 구역에 style을 직접 지정
> 스타일 관련 css 시트를 따로 만들어서 링크로 지정
> 스타일없는 브라우저의 기본값


선택자 우선순위
 - ID 선택자 > class 선택자 > 태그선택자

{!important;}
 - 모든 우선순위를 무시하고 해당 css를 우선적으로 적용한다.


같은 속성을 적용할때

<style>
	color: blue;
	color: yellow;
	color: red;
</style>

 - 같은 색상 속성을 다같이 쓴경우 가장 마지막 속성이 적용된다


전체 태그와 해당 태그에 적용시

 - 해당 태그 > 전체 태그


transform (변형)
 - 다소 가볍고 단순한 애니메이션

transition (변환)
 - 좀더 다양하고 깊이있는(?) 애니메이션 추가할수 있음.
 - width, height 

>transition-property
 - 트랜지션의 대상을 지정
 - 트렌지션을 지정함으로서 변화할 값. (width, height, background-color등 어떤것이 변화할 것인가)

>transition-duration
 - 트랜지션을 실행할 시간을 지정
 - 이 애니메이션을 몇초(*s)동안 지정할 것인가?
 - width는 몇초, height는 몇초. 이런식으로 따로따로 지정할수 있다.

>transition-delay
 - 트랜지션의 지연시간을 지정
 - duration에서 지정한 시간중, 어떤것은 살짝 지연되서 시작하기 같은 설정을 지정할수 있다.

>transition-timing-function
 - 트랜지션의 실행상태를 지정 (실행되는 시간의 흐름? 빠르다가 늦는다던지)
 - ease, ease-in, ease-out, ease-in-out, linear 
 - cubic-bezier(.61, .30, .55, .30) 이런식으로 따로 설정할수도 있다.


>transition 
 - 4가지 속성을 한꺼번에 지정
 - transition: 2s ease-in;  /* 대상: all, 시간:2초, 함수:ease-in */


animation
 - transform 이나 transittion 보다 더 풍부한 효과
 - @Keyframes 애니매니션이 바뀌는 지점을 지정
 - from {	transform:rotate(0deg)  /* 시작은 0도에서 */ }
 - to {transform: rotate(45deg);  /* 45도까지 회전 */}



flex 
 - div들을 flex container로 묶어서?
 - 
 - 가로로 가는걸 주축
 - 세로로 가는걸 교차축

  .container { display: flex; }
 - 플렉스 컨테이너 지정

   #opt1{ flex-direction: row; }
 - 왼쪽에서 오른쪽으로  
   #opt2{ flex-direction: row-reverse; }  
 - 오른쪽에서 왼쪽으로 
   #opt3{ flex-direction: column; }
 - 위에서 아래로
   #opt4{ flex-direction: column-reverse; }
 - 아래에서 위로           


flex-wrap
 - flex 요소들을 묶어줌
 - nowrap : 기본값. wrap을 적용하지 않음. 화면 비율에 따라 width를 보호해주지 못함.
 - wrap : 여러줄을 표시해줌. 
 - wrap-reverse : wrap을 적용하는 동시에 내용물을 역순으로 정렬


justify-content
    #opt1{ justify-content: flex-start; }
 - 주축 시작점 기준으로 배치 ,기본값 
    #opt2{ justify-content: flex-end; }
 -  주축 끝점 기준으로 배치 
    #opt3{ justify-content: center;}  
 -  주축 중앙 기준으로 배치
    #opt4{ justify-content: space-between; }
 -  시작점과 끝점 배치 후 중간 항목은 같은 간격으로 배치 
    #opt5{ justify-content: space-around; }
 - 전체 항목을 같은 간격으로 배치 */ 



align-items
 : 교차축(새로)을 기준으로 정렬 
    #opt1{align-items: flex-start; }
 - 주축 시작점 기준으로 배치 */
    #opt2{align-items: flex-end; }
 - 주축 끝점 기준으로 배치 
    #opt3{ align-items: center; }
 -  주축 중앙 기준으로 배치 
    #opt4{ align-items: baseline; }
 -  문자 기준선에 맞춰 배치
    #opt5{ align-items: stretch; }
 -  항목을 늘려 교차축에 가득차게 배치 


aligh-self 
 : 교차축 정렬을 서로 다르게 하고 싶을때

align-content
 : 주축에서 줄바꿈이 생겼을때, flex 항목을 여러줄로 표시할 수 있다. 

    #opt1{ align-content: flex-start; }
 -  교차축 시작점 기준
    #opt2{ align-content: flex-end; }
 -  교차축 끝점 기준 
    #opt3{ align-content: center; }
 -  교차축 중앙 기준
    #opt4{ align-content: space-between; }
 -  시작점과 끝점 배치 후 중간 항목은 같은 간격으로 배치    
    #opt5{ align-content: space-around; }
 -  전체 항목을 같은 간격으로 배치     
    #opt6{ align-content: stretch; }
 -  항목을 늘려 교차축에 가득 차게 배치 


반응형에서 유용한 단위

 - %
 - vw: 뷰포트의 width(10vw = 현재 뷰포트에서 10%)
 - vh: 뷰포트의 height(10vw = 현재 뷰포트에서 10%)
 - vmax: 뷰포트 너비와 높이 중에서 큰 값의 1%와 같음  (잘안씀)
 - vmin: 뷰포트 너비와 높이 중에서 작은 값의 1%와 같음  (잘안씀)
 - em: 부모태그를 기준으로 배율을 정함
 - rem: <html></html>을 기준으로 배율을 정함
 - calc: 계산기의 역할 (나중에)

MAX, MIN 속성

- max-width, max-height
최대 너비(높이), 콘텐츠의 너비(높이)가 max-width보다 더이상 커지지 않음
 - 최대 사이즈를 지정 (상한선)

- min-width, min-height
최소 너비(높이), 콘텐츠의 너비(높이)가 min-width보다 작아지면 더 이상 줄어들지 않음
 - 최소 사이즈를 지정 (하한선)


    /* body 안에 button 이 있으므로 body가 container가 된다. */
    body {      
      background: url('./images/bg.jpg') no-repeat left top fixed;
      background-size: cover;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
           }

{flex: 1; }
 - flex : 너비
 - flex-basis
 : 기본 크기 (flex만 써두면 너비를 설정.)
 - flex-grow
 : 컨테이너에 남는 공간이 있으면, 아이템의 flex-basis크기가 얼마나 더 할당 가능한지 나타내는 속성
 - flex-shrink
 : 컨테이너에 공간이 부족해지면, 아이템의 크기가 얼마나 더 줄어들 수 있는지를 지정해 주는 속성


grid
 - flex는 주축, 교차축 으로 구성되어 있으나, gird는 칸으로 구성되어 있다??
 - row : 가로칸
 - column : 세로칸

    #wrapper{
    display: grid;  /* 그리드 컨테이너 지정 */
    grid-template-columns: 200px 200px 200px ;  /* 너비 200px 칼럼 3개 */
    grid-template-rows: 100px 100px ;  /* 줄 높이 100px */
               }

- grid-template-columns
 : 입력한 넓이의 갯수만큼 칼럼이 생성됨

 - px로 입력시, 고정크기 : 브라우저나 화면크기에 상관없이 크기 고정
 - fr로 입력시 비율에 따라 크기가 변경

    #wrapper{
    width: 600px;
    display: grid;  /* 그리드 컨테이너 지정 */
    grid-template-columns: repeat(3, 1fr);  /* 너비가 같은 칼럼 3개 */
    grid-template-rows: minmax(100px, auto);  /* 줄 높이 최소값은 100px, 최대값은 자동 */
    }

   grid-column-gap:30px; 
 : collumn 사이의 간격을 30px로 맞춘다.
   grid-row-gap:20px;
 : row 사이의 간격을 20px로 맞춘다.


semantic태그
 - 태그의 이름만 봐도 한눈에 알기 편하게 태그를 설정.
 - div로만 짜두면 나중에 혼동이 올수도 있음.

• 주로 쓰이는 시멘틱 태그
 •<article>
 •<aside>
 •<footer>
 •<header> 
 •<main> 
 •<nav> : 메뉴 태그
 •<section> 
 
 - article 태그는 반드시 section태그의 자손일 필요는 없음

